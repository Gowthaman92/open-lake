{{- if not .Values.storage }}
{{- fail "Storage configuration is required. Please set storage.type and the corresponding provider configuration." }}
{{- end }}

{{- if not .Values.storage.type }}
{{- fail "storage.type is required. Must be one of: azure, aws, gcp" }}
{{- end }}

{{- if eq .Values.storage.type "azure" }}
{{- if not .Values.storage.azure }}
{{- fail "Azure storage configuration is required when storage.type is 'azure'" }}
{{- end }}

{{- if not .Values.storage.azure.storageAccount }}
{{- fail "storage.azure.storageAccount is required" }}
{{- end }}

{{- if not .Values.storage.azure.containerName }}
{{- fail "storage.azure.containerName is required" }}
{{- end }}

{{- if not .Values.storage.azure.existingSecret.name }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-storage-credentials
  labels:
    {{- include "openlake.labels" (dict "component" "hive-metastore" "context" $ "Release" .Release) | nindent 4 }}
type: Opaque
stringData:
  storage-key: {{ required "Storage key is required when not using existingSecret. Either provide storage.azure.storageKey or configure storage.azure.existingSecret" .Values.storage.azure.storageKey | quote }}
{{- end }}
{{- else if eq .Values.storage.type "aws" }}
{{- if not .Values.storage.aws.existingSecret }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "openlake.serviceName" (dict "component" "hive-metastore" "context" .) }}-secrets
  labels:
    {{- include "openlake.labels" (dict "component" "hive-metastore" "context" $ "Release" .Release) | nindent 4 }}
type: Opaque
stringData:
  aws-access-key: {{ .Values.storage.aws.accessKey | quote }}
  aws-secret-key: {{ .Values.storage.aws.secretKey | quote }}
{{- end }}
{{- else if eq .Values.storage.type "gcp" }}
{{- if not .Values.storage.gcp.existingSecret }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "openlake.serviceName" (dict "component" "hive-metastore" "context" .) }}-secrets
  labels:
    {{- include "openlake.labels" (dict "component" "hive-metastore" "context" $ "Release" .Release) | nindent 4 }}
type: Opaque
stringData:
  gcp-key-file: {{ .Values.storage.gcp.keyFile | quote }}
{{- end }}
{{- end }}

{{- if eq .Values.database.mode "external" }}
{{- if not .Values.database.external.existingSecret.name }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-db-credentials
  labels:
    {{- include "openlake.labels" (dict "component" "hive-metastore" "context" $ "Release" .Release) | nindent 4 }}
type: Opaque
stringData:
  password: {{ required "Database password is required when using external database without existingSecret. Either provide database.external.password or configure database.external.existingSecret" .Values.database.external.password | quote }}
{{- end }}
{{- end }} 